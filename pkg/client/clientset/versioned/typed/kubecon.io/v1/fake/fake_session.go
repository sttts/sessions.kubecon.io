// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	kubecon_io_v1 "k8s.io/kubecon/pkg/apis/kubecon.io/v1"
)

// FakeSessions implements SessionInterface
type FakeSessions struct {
	Fake *FakeKubeconV1
	ns   string
}

var sessionsResource = schema.GroupVersionResource{Group: "kubecon.io", Version: "v1", Resource: "sessions"}

var sessionsKind = schema.GroupVersionKind{Group: "kubecon.io", Version: "v1", Kind: "Session"}

// Get takes name of the session, and returns the corresponding session object, and an error if there is any.
func (c *FakeSessions) Get(name string, options v1.GetOptions) (result *kubecon_io_v1.Session, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(sessionsResource, c.ns, name), &kubecon_io_v1.Session{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubecon_io_v1.Session), err
}

// List takes label and field selectors, and returns the list of Sessions that match those selectors.
func (c *FakeSessions) List(opts v1.ListOptions) (result *kubecon_io_v1.SessionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(sessionsResource, sessionsKind, c.ns, opts), &kubecon_io_v1.SessionList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kubecon_io_v1.SessionList{}
	for _, item := range obj.(*kubecon_io_v1.SessionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sessions.
func (c *FakeSessions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(sessionsResource, c.ns, opts))

}

// Create takes the representation of a session and creates it.  Returns the server's representation of the session, and an error, if there is any.
func (c *FakeSessions) Create(session *kubecon_io_v1.Session) (result *kubecon_io_v1.Session, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(sessionsResource, c.ns, session), &kubecon_io_v1.Session{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubecon_io_v1.Session), err
}

// Update takes the representation of a session and updates it. Returns the server's representation of the session, and an error, if there is any.
func (c *FakeSessions) Update(session *kubecon_io_v1.Session) (result *kubecon_io_v1.Session, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(sessionsResource, c.ns, session), &kubecon_io_v1.Session{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubecon_io_v1.Session), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSessions) UpdateStatus(session *kubecon_io_v1.Session) (*kubecon_io_v1.Session, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(sessionsResource, "status", c.ns, session), &kubecon_io_v1.Session{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubecon_io_v1.Session), err
}

// Delete takes name of the session and deletes it. Returns an error if one occurs.
func (c *FakeSessions) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(sessionsResource, c.ns, name), &kubecon_io_v1.Session{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSessions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(sessionsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &kubecon_io_v1.SessionList{})
	return err
}

// Patch applies the patch and returns the patched session.
func (c *FakeSessions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *kubecon_io_v1.Session, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sessionsResource, c.ns, name, data, subresources...), &kubecon_io_v1.Session{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubecon_io_v1.Session), err
}
