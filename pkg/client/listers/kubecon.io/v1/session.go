// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubecon/pkg/apis/kubecon.io/v1"
)

// SessionLister helps list Sessions.
type SessionLister interface {
	// List lists all Sessions in the indexer.
	List(selector labels.Selector) (ret []*v1.Session, err error)
	// Sessions returns an object that can list and get Sessions.
	Sessions(namespace string) SessionNamespaceLister
	SessionListerExpansion
}

// sessionLister implements the SessionLister interface.
type sessionLister struct {
	indexer cache.Indexer
}

// NewSessionLister returns a new SessionLister.
func NewSessionLister(indexer cache.Indexer) SessionLister {
	return &sessionLister{indexer: indexer}
}

// List lists all Sessions in the indexer.
func (s *sessionLister) List(selector labels.Selector) (ret []*v1.Session, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Session))
	})
	return ret, err
}

// Sessions returns an object that can list and get Sessions.
func (s *sessionLister) Sessions(namespace string) SessionNamespaceLister {
	return sessionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SessionNamespaceLister helps list and get Sessions.
type SessionNamespaceLister interface {
	// List lists all Sessions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Session, err error)
	// Get retrieves the Session from the indexer for a given namespace and name.
	Get(name string) (*v1.Session, error)
	SessionNamespaceListerExpansion
}

// sessionNamespaceLister implements the SessionNamespaceLister
// interface.
type sessionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sessions in the indexer for a given namespace.
func (s sessionNamespaceLister) List(selector labels.Selector) (ret []*v1.Session, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Session))
	})
	return ret, err
}

// Get retrieves the Session from the indexer for a given namespace and name.
func (s sessionNamespaceLister) Get(name string) (*v1.Session, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("session"), name)
	}
	return obj.(*v1.Session), nil
}
